#!/usr/bin/python3

import os
import argparse
import subprocess

# parse arguments
parser = argparse.ArgumentParser()
parser.add_argument("fasm", metavar="input.s", help="the MIPS assembly file (ASCII)")
args = parser.parse_args()

fasm = args.fasm  # 获取传递给脚本的MIPS汇编文件的文件名
fhex = os.path.splitext(args.fasm)[0] + ".x"  # 构建输出的十六进制文件名

# run MARS to assemble the MIPS code
MARS = "java -jar Mars.jar"  # 设置MARS的Mars.jar文件的路径
cmd = [MARS, "a", fasm]  # 构建运行MARS的命令
subprocess.call(cmd, shell=True)  # 运行MARS来汇编MIPS代码，shell=True表示通过shell运行命令

# MARS generates a binary file, but we are interested in only the text segment
cmd = ["mv", fasm + ".txt", fhex]  # 将MARS生成的文本段重命名为输出文件
subprocess.call(cmd)  # 执行重命名操作

# remove unnecessary two lines from the file
lines = open(fhex).readlines()  # 读取输出文件的所有行
lines = map(lambda x: x.lstrip(), lines)  # 去除每行左侧的空格
data = str.join('', lines[2:])  # 从第三行开始重新构建文件内容
data = str.join('\n', data.split())  # 去除多余的空格和换行符
open(fhex, 'w').write(data)  # 将处理后的内容写回输出文件

# remove all other files generated by MARS
cmd = ["rm", fasm + ".*"]  # 删除MARS生成的其他文件
cmd = str.join(' ', cmd)
subprocess.call(cmd, shell=True)  # 执行删除操作，shell=True表示通过shell运行命令
